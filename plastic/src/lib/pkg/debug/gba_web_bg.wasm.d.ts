/* tslint:disable */
/* eslint-disable */
export function __wbg_gba_free(a: number): void;
export function gba_new(): number;
export function gba_load_rom(a: number, b: number, c: number, d: number): void;
export function gba_set_key(a: number, b: number, c: number, d: number): void;
export function gba_set_pause(a: number, b: number, c: number): void;
export function gba_set_screen_array(a: number, b: number): void;
export function gba_request_screen_draw(a: number, b: number): void;
export function gba_request_cpu_debug_info(a: number, b: number): void;
export function gba_process_responses(a: number, b: number): void;
export function __wbg_cpudebuginfo_free(a: number): void;
export function __wbg_get_cpudebuginfo_pc(a: number): number;
export function __wbg_set_cpudebuginfo_pc(a: number, b: number): void;
export function wasm_thread_entry_point(a: number): void;
export function __wbg_memorydetails_free(a: number): void;
export function memorydetails_vram(a: number): number;
export function disassemble_arm(a: number, b: number): void;
export function disassemble_thumb(a: number, b: number): void;
export function __wbg_cpudetails_free(a: number): void;
export function __wbg_get_cpudetails_executing_pc(a: number, b: number): void;
export function __wbg_set_cpudetails_executing_pc(a: number, b: number, c: number): void;
export function cpudetails_reg(a: number, b: number, c: number, d: number): void;
export function cpudetails_cpsr(a: number): number;
export function cpudetails_spsr(a: number, b: number, c: number): void;
export function cpudetails_mode(a: number): number;
export function cpudetails_pc(a: number): number;
export function __wbg_gbacore_free(a: number): void;
export function __wbg_get_gbacore_stopped(a: number): number;
export function __wbg_set_gbacore_stopped(a: number, b: number): void;
export function gbacore_pc(a: number): number;
export function gbacore_read_halfword(a: number, b: number): number;
export function gbacore_thumb_state(a: number): number;
export function gbacore_tick(a: number): void;
export function gbacore_tick_multiple(a: number, b: number): void;
export function gbacore_load_test_rom(a: number): void;
export function gbacore_load_rom(a: number, b: number, c: number): void;
export function gbacore_skip_bios(a: number): void;
export function gbacore_reset(a: number): number;
export function gbacore_enable_debugger(a: number, b: number): void;
export function gbacore_set_stopped(a: number, b: number): void;
export function gbacore_arm_breakpoints(a: number, b: number): void;
export function gbacore_thumb_breakpoints(a: number, b: number): void;
export function gbacore_add_arm_breakpoint(a: number, b: number): void;
export function gbacore_add_thumb_breakpoint(a: number, b: number): void;
export function gbacore_remove_arm_breakpoint(a: number, b: number): void;
export function gbacore_remove_thumb_breakpoint(a: number, b: number): void;
export function gbacore_read_address(a: number, b: number): number;
export function gbacore_set_key(a: number, b: number, c: number): void;
export function __wbg_ppu_free(a: number): void;
export function __wbg_ppudetails_free(a: number): void;
export function __wbg_get_ppudetails_bg_mode(a: number): number;
export function __wbg_set_ppudetails_bg_mode(a: number, b: number): void;
export function ppudetails_screen(a: number): number;
export const memory: WebAssembly.Memory;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_3: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut___A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hfb1e08cca19b5774(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_thread_destroy(a: number, b: number): void;
export function __wbindgen_start(): void;
